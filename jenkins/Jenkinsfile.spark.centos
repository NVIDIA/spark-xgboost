#!/usr/bin/groovy

// -*- mode: groovy -*-
// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/

import groovy.transform.Field

/* Unrestricted tasks: tasks that do NOT generate artifacts */

// Utility functions
@Field
def utils

pipeline {
    agent any

    // Setup common job properties
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        gitLabConnection('GitLab Master')
    }

    environment {
        URM_CREDS = credentials("svcngcc_artifactory")
    }

    parameters {
        string(name: 'CUDA_VER', defaultValue: '10.1', description: 'cuda version, 10.1, 10.2')
        string(name: 'REF', defaultValue: '\${gitlabBranch}', description: 'Commit to build')
    }

    // Build stages
    stages {
        stage('Jenkins: Get sources') {
            steps {
                updateGitlabCommitStatus(name: 'Jenkins CI', state: 'running')
                script {
                    utils = load('tests/ci_build/jenkins_tools_spark.Groovy')
                    utils.checkoutSrcs()
                }
                stash name: 'srcs', excludes: '.git/'
                milestone label: 'Sources ready', ordinal: 1
            }
        }
        stage('Jenkins: Build & Test') {
            agent { label 'docker-gpu' }
            steps {
                unstash name: 'srcs'
                script {
                    def IMAGE_NAME="urm.nvidia.com/sw-spark-docker/xgboost:dev3-centos7"
                    def DOCKER_CMD="docker --config $WORKSPACE/.docker"
                    sh """
                        echo $URM_CREDS_PSW | $DOCKER_CMD login https://urm.nvidia.com -u $URM_CREDS_USR --password-stdin
                        $DOCKER_CMD pull $IMAGE_NAME
                        $DOCKER_CMD logout https://urm.nvidia.com
                    """
                    docker.image(IMAGE_NAME).inside("--runtime=nvidia \
                        -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro") {
                        sh 'scl enable devtoolset-7 jenkins/local/build-jvm-premerge.sh'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def status = "failed"
                if (currentBuild.currentResult == "SUCCESS") {
                    status = "success"
                } else {
                    status = "failed"
                }
                updateGitlabCommitStatus(name: 'Jenkins CI', state: status)
            }
        }
    }

}
